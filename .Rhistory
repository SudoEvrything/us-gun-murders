S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
x <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/10))
S <- sum(x)
S
mean(S < 0)
n <- 1000 #no. of players
B <- 10000 # no. of Monte Carlo sim
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
# plot a histogram of the observed values of S as well as the normal density curve
#based on the mean and standard deviation of S.
library(tidyverse)
# sequence of 100 values across range of S
s <- seq(min(S), max(S), 100)
# generate normal density for S
normal_density <- data.frame(s = s, f = dnorm(s, mean(s), sd(s)))
data.frame(S = S) %>% # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
# sequence of 100 values across range of S
s <- seq(min(S), max(S), 100)
# generate normal density for S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S)))
data.frame(S = S) %>% # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
sum(X) #determine profit
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
# sequence of 100 values across range of S
s <- seq(min(S), max(S), length = 100)
# generate normal density for S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S)))
data.frame(S = S) %>% # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
S <- replicate(B,{
X <- sample(c(-1, 1), n, replace = TRUE, prob = c(9/19, 10/19))
sum(X) #determine profit
})
mean(S < 0)
# sequence of 100 values across range of S
s <- seq(min(S), max(S), length = 100)
# generate normal density for S
normal_density <- data.frame(s = s, f = dnorm(s, mean(S), sd(S)))
data.frame(S = S) %>% # make data frame of S for histogram
ggplot(aes(S, ..density..)) +
geom_histogram(color = "black", binwidth = 10) +
ylab("Probability") +
geom_line(data = normal_density, mapping = aes(s, f), color = "blue")
pnorm(8, 0, 3.3166)
1 - pnorm(8, 0, 3.3166)
source("D:/Data R/3 Probability/3 Random Variables/RandomVariables.R", echo=TRUE)
B <- 10000
S <- replicate()
mean(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
mean(S >= 8)
(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
S <- replicate(B, {
(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
mean(S >= 8)
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
set.seed(21, sample.kind = "Rounding")
B <- 10000
n <- 44
S <- replicate(B, {
sum(sample(c(1, -.25), n, replace = TRUE, prob = c(.2, .8)))
})
mean(S >= 8)
sum(sample(c(1, 0), n, replace = TRUE, prob = c(.25, .75)))
S <- replicate(B, {
sum(sample(c(1, 0), n, replace = TRUE, prob = c(.25, .75)))
})
mean(S >= 8)
mean(S)
p <- seq(0.25, 0.95, 0.05)
sample(c(1,0), p, replace = TRUE, prob = c(.25, .75))
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
fn <- function(n)  {
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
}
sapply(p, fn)
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
sum(x)
fn <- function(n)  {
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
}
sapply(p, fn)
p <- seq(0.25, 0.95, 0.05)
sapply(p, fn)
fn(p)
sapply(p, fn)
S <- sapply(p, fn)
S
x <- sample(c(1,0), n, replace = TRUE, prob = p)
c(.25, .75)
c(.25, .75)
sum(x)
fn <- function(n)  {
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
}
S <- sapply(p, fn)
S
fn
p <- seq(0.25, 0.95, 0.05)
p
source("~/.active-rstudio-document", echo=TRUE)
S <- sapply(p, fn)
S
fn <- function(a)  {
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
}
S <- sapply(p, fn)
S
p <- seq(0.25, 0.95, 0.05)
fn <- function(a)  {
x <- sample(c(1,0), n, replace = TRUE, prob = c(.25, .75))
sum(x)
}
S <- sapply(p, fn)
S <- sapply(p, fn)
S
mean(S > 35)
x <- sample(c(1,0), 44, replace = TRUE, prob = c(.25, .75))
sum(x)
fn <- function(a)  {
x <- sample(c(1,0), 44, replace = TRUE, prob = c(.25, .75))
sum(x)
}
S <- sapply(p, fn)
S
mean(S > 35)
n
a
q
fn <- function(q)  {
x <- sample(c(1,0), 44, replace = TRUE, prob = c(.25, .75))
sum(x)
}
S <- sapply(p, fn)
S
mean(S > 35)
s
l
l
m
p
t
q
n
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
expval <- sapply(p, fn)
mean(expval > .8)
min(p[which(expval > .8)])
p <- 5/38
a <- 6
b <- -1
mu <- a*p + b*(1-p)
sigma <- abs(b - a) * sqrt(p * (1 - p))
1 - pnorm(0, 500 * mu, sqrt * sigma)
1 - pnorm(0, 500 * mu, sqrt(500) * sigma)
1 - pnorm(0,  mu, sigma)
pnorm(0,  mu, sigma)
pnorm(0,  mu *500, sqrt(500) *sigma)
source("D:/Data R/3 Probability/4 The Big Short/The Big Short.R", echo=TRUE)
sum(defaults * loss_per_foreclosure)
defaults
sum(defaults * loss_per_foreclosure)
n <- 1000 # no. of loans
loss_per_foreclosure <- -200000
p <- 0.02
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
#Interest rate Monte Carlo simulation
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0,1), n, prob = c(1 -p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
losses
mean(losses)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0,1), n, prob = c(1 -p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0,1), n, prob = c(1 -p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0,1), n, prob = c(1 -p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
B <- 10000
losses <- replicate(B, {
defaults <- sample(c(0,1), n, prob = c(1 -p, p), replace = TRUE)
sum(defaults * loss_per_foreclosure)
})
mean(losses)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
defaults <- sample(c(0, 1), n, replace = TRUE, prob = c(1-p, p))
sum(defaults * loss_per_foreclosure)
#plotting expected losses
library(tidyverse)
data.frame(losses_in_millions = losses /10^6) %>%
ggplot(aes(losses_in_millions)) +
geom_histogram(binwidth = .6, col = "black")
n * (p * loss_per_foreclosure + (1 - p) * 0)
p * loss_per_foreclosure + (1 - p) * 0
p * loss_per_foreclosure + (1 - p) * 4000
p * loss_per_foreclosure + (1 - p) * -4000
sqrt(n) * abs(loss_per_foreclosure) * sqrt(p * (1-p))
x = - loss_per_foreclosure * p /(1 - p)
x
#On a $180,000 loan, this equals an interest rate of:
x/180000
l < - loss_per_foreclosure
l <- loss_per_foreclosure
z <- qnorm(0.01)
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))\x
x <- -l*( n*p - z*sqrt(n*p*(1-p)))/ ( n*(1-p) + z*sqrt(n*p*(1-p)))
x
x/180000 # interest rate
# expected value of the profit per loan
loss_per_foreclosure * p + x * (1 - p)
#expected value of the profit over n loans
n * (loss_per_foreclosure*p + x*(1-p))
sum(draws)
profit <- replicate(B, {
draws <- sample(c(x, loss_per_foreclosure), n, replace = TRUE, prob = c(1-p, p))
sum(draws)
})
mean(profit)
mean(profit < 0)
getwd()
cls
getwd()
setwd("D:/Data R/3 Probability/2.1 Continuous Probability")
setwd("~/")
setwd("D:/projects/murders")
getwd()
